Installation
============
This section covers how to setup an environment used for building your data lake by means of the `aws cdk \
<https://docs.aws.amazon.com/cdk/latest/guide/home.html>`_, and how to install the ``oedi`` package and use ``oedi`` commands to run crawlers and test SQL queries.

The easiest way to setup the environment is using Docker, but you can also set it up in your local
environment step by step.

Please refer to the `oedi S3 viewer <https://data.openei.org/s3_viewer?bucket=oedi-data-lake>`_ 
for information about what data sets are currently available.

Docker Environment
------------------

First, you will need to install and configure Docker. To do this, please refer to `Docker's documentation <https://docs.Docker.com/get-Docker/>`_ for your specific machine. Once you have Docker installed, there are two ways to obtain the Docker image of the ``oedi`` tools: either pull it from Docker Hub,
or build it from the source code.

Pull Docker Image from Docker Hub
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The simplest way to obtain the Docker image is to pull it directly from our Docker Hub `repo <https://hub.Docker.com/r/openenergydatainitiative/oedi>`_. To do anything with Docker, you will first need to get an instance of the Docker daemon running. If you installed Docker Desktop, then you just need to open the app, and the daemon will start automatically. Next, open a command line and run:

.. code-block:: bash

    docker pull openenergydatainitiative/oedi

If you are using Docker Desktop, you should now see the image under the Images tab. Alternatively, you can run ``docker images`` in the terminal to see a list of images.

Build Docker Image from Source Code
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If you're having trouble with Docker Hub, you can have Docker build the image from a clone of our repo. Get a copy of the source code from our public Github repository - `open-data-access-tools <https://github.com/openEDI/open-data-access-tools>`_:

.. code-block:: bash

    git clone git@github.com:openEDI/open-data-access-tools.git

In the terminal, navigate to the directory where you saved the source code, ``open-data-access-tools``,
and build the Docker image using the ``build`` command:

.. code-block:: bash

    cd <path to open-data-access-tools folder>
    docker build -t openenergydatainitiative/oedi .

If you are using Docker Desktop, you should now see the image under the Images tab. Alternatively, you can run ``docker images`` in the terminal to see a list of images.

Deploy Image to Container
^^^^^^^^^^^^^^^^^^^^^^^^^

In order to use the tools, you will need to have an AWS account and have the `AWS CLI <https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html>`_ installed on your machine. Next, you will need to configure your `AWS credentials <https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html>`_. Find the path to the ``.aws`` folder containing your credentials file that was generated by the configuration step, and then use the following command to run the image in a new container:

.. code-block:: bash

    docker run --rm -it -v <path to credentials>:/root/.aws openenergydatainitiative/oedi bash

If you are using Docker Desktop, you should now see that a container is running. The terminal where you made the ``docker run`` command is now a bash terminal running on the container.

Now, you are in an ``oedi`` Docker environment, and can build and use a data lake!

A quick note: Docker containers are ephemeral, meaning that any changes you make to files in the container will be lost when the container is shut down. For instance, if you open one of the jupyter notebook examples and make some changes, your changes will be lost when the container is shut down. When you deploy a data lake, the ``oedi`` tools will communicate with S3 and store information in a bucket in your AWS account. This data will not be lost when the container is shut down.

Also, you might find it useful to be able to edit local files that survive beyond the lifecycle of the container. This can be accomplished through another binding mount option in the ``docker run`` command. This mounts a local folder to the container so that the container has access to the folder and any changes made will persist. Add the following option in the command above:

.. code-block:: bash

    -v <path to local folder>:open-data-access-tools/myfolder

..
    I still need to go through this section and try it myself (mh)

Local Environment
-----------------

If you want to setup the environment directly into your computer, please follow the steps below.

1. Get a copy of the source code from our public Github repository - `open-data-access-tools <https://github.com/openEDI/open-data-access-tools>`_:

   .. code-block:: bash

       git clone git@github.com:openEDI/open-data-access-tools.git

2. Install `Node.js (>=10.3.0) <https://nodejs.org/en/download/>`_ and `npm <https://www.npmjs.com/>`_ 
to your computer. The ``cdk`` command-line tool and the AWS Construct Library are developed in TypeScript and 
run on `Node.js`, and the bindings for Python use this backend and toolset as well.

3. Create a virutal Python environment for the project.

It's recommended to create a virtual environment for a Python project. There are many tools and 
tutorials online about this, like `virtualenv <https://virtualenv.pypa.io/en/latest/>`_, 
``virtualenv`` with `virtualenvwrapper <https://virtualenvwrapper.readthedocs.io/en/latest/>`_, 
`pipenv <https://github.com/pypa/pipenv>`_, `conda <https://docs.conda.io/en/latest/>`_, etc. 
You can choose based on your own perference. Here, we use ``virtualenv`` with ``virtualenvwrapper`` as 
an example.

  .. code-block::

    # Make virtual environment
    $ mkvirtualenv -p python3 oedi

    # Activate virtual environment
    $ workon oedi

    # Deactivate virtual environment
    (oedi) $ deactivate

4. Make sure your ``oedi`` virtual environment is activated, then go the root directory of 
``open-data-access-tools`` and install this package editablely.


.. code-block:: bash

    $ workon oedi 
    (oedi) $ cd open-data-access-tools
    (oedi) $ pip install -e .

5. Change work directory to the one that contains AWS CDK app.

.. code-block:: bash

    (oedi) $ cd oedi/AWS
    (oedi) $ pwd
    ~/open-data-access-tools/oedi/AWS

Now, you are in the ``oedi`` local environment, and build and use OEDI data lake.
